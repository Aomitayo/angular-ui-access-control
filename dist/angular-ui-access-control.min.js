"use strict";angular.module("aomitayo.angular-ui-access-control",["ui.router"]),angular.module("aomitayo.angular-ui-access-control").directive("showWithAuthAny",["permissionsConfigs",function(permissionsConfigs){return{link:function(scope,element,attrs){scope.watch(attrs.showWithAuthAny,function(newVal){element.toggle(permissionsConfigs.checkForAny(newVal))})}}}]).directive("showWithAuthAll",["permissionsConfigs",function(permissionsConfigs){return{link:function(scope,element,attrs){scope.watch(attrs.showWithAuthAll,function(newVal){element.toggle(permissionsConfigs.checkForAll(newVal,!0))})}}}]),angular.module("aomitayo.angular-ui-access-control").provider("permissionsConfig",[function(){function PermissionsConfig(grantsFn,$injector,$q){var self=this;self.grantsFn=grantsFn,self.$injector=$injector,self.$q=$q}return PermissionsConfig.prototype={constructor:PermissionsConfig,grants:function(){return this.$q.when(this.resolveInjectable(this.grantsFn))},checkForAll:function(required){var self=this,$q=self.$q;return $q.when(self.resolveInjectable(self.grantsFn)).then(function(granted){if(null===granted||"undefined"==typeof granted)return null;var intersection=self.intersection(required,granted);return intersection.length==required.length})},checkForAny:function(required){var self=this,$q=self.$q;return $q.when(self.resolveInjectable(self.grantsFn)).then(function(granted){if(null===granted||"undefined"==typeof granted)return null;var intersection=self.intersection(required,granted);return intersection.length>0})},resolveInjectable:function(val,injectionContext,locals){var self=this;if(injectionContext=injectionContext||{},locals=locals||{},!angular.isFunction(val)&&!angular.isArray(val))throw new Error("Invalid type:  Array, function or Injection Annotated function expected");return val=angular.isFunction(val)||angular.isArray(val)&&angular.isFunction(val[val.length-1])?self.$injector.invoke(val,injectionContext,locals):val},intersection:function(arr1,arr2){var intersection=[];return angular.forEach(arr1,function(v){-1!=arr2.indexOf(v)&&intersection.push(v)}),intersection}},{grantsFn:null,$get:["$injector","$q",function($injector,$q){return this.permissionsConfig=this.permissionsConfig||new PermissionsConfig(this.grantsFn,$injector,$q),this.permissionsConfig}]}}]),angular.module("aomitayo.angular-ui-access-control").provider("sentinel",["$urlRouterProvider",function(){function Sentinel(options,configs,permissionsConfig,$rootScope,$state,$location,$q){var self=this;self.options=angular.copy(options),self.configs=configs,self.$state=$state,self.$location=$location,self.$q=$q,$rootScope.$on("$stateChangeStart",function(evt,toState,toParams){if(self.active){var config=self.configs.states[toState.name];if(config){if(toState.sentinelAllow)return toState.sentinelAllow=!1,void 0;evt.preventDefault(),self.checkPermissions(toState.data,config,self.options.grants,permissionsConfig,$q).then(function(allow){allow?(toState.sentinelAllow=!0,$state.go(toState.name,toParams)):null===allow?(self.redirectTo(self.options.whenNoGrants),$rootScope.$broadcast("sentinel.nogrant",toState,toParams)):(self.redirectTo(self.options.whenDenied),$rootScope.$broadcast("sentinel.denied",toState,toParams))})}}})}var defaultOptions={whenDenied:"denied",whenNoGrants:"login",grants:null};return Sentinel.prototype={constructor:Sentinel,activate:function(){this.active=!0},deactivate:function(){this.active=!1},redirectTo:function(path){var self=this,r=new RegExp("^./|/");r.test(path)?self.$location.path(path):self.$state.go(path)},checkPermissions:function(data,config,grants,permissionsConfig,$q){return data=data||{},$q.all({all:$q.when(permissionsConfig.resolveInjectable(config.requireAll||data.requireAll||[])),any:$q.when(permissionsConfig.resolveInjectable(config.requireAny||data.requireAny||[]))}).then(function(args){return 0===args.all.length&&0===args.any.length?!0:args.all.length>0?permissionsConfig.checkForAll(args.all):args.any.length>0?permissionsConfig.checkForAny(args.any,args.grants):!1})},intersection:function(arr1,arr2){var intersection=[];return angular.forEach(arr1,function(v){-1!=arr2.indexOf(v)&&intersection.push(v)}),intersection}},{options:{},configs:{states:{},routes:{}},sentinel:null,$get:["permissionsConfig","$rootScope","$state","$location","$q",function(permissionsConfig,$rootScope,$state,$location,$q){return this.sentinel=this.sentinel||new Sentinel(this.options,this.configs,permissionsConfig,$rootScope,$state,$location,$q),this.sentinel}],setOptions:function(options){return this.options=angular.extend(this.options,defaultOptions,options),this},watchState:function(name,config){return this.configs.states[name]=config,this}}}]);